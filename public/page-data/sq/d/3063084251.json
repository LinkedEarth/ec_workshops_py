{"data":{"allMarkdownRemark":{"edges":[{"node":{"rawMarkdownBody":"\n<div><h1><img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module1/00_ec_slide1.png?raw=true\" alt=\"EC Theme\" width=25% align=\"left\"/> Lesson 0<br>Introduction to Jupyter</h1></div>\n\n---\n\n# What is Jupyter?\n\nThe Jupyter Notebook is an open source web application that you can use to create and share documents that contain live code, equations, visualizations, and text.\n\nThe name, Jupyter, comes from the core supported programming languages that it supports: Julia, Python, and R. \n\nFor this workshop, we will be using R via [Jupyter](https://jupyter.org/index.html)\n\n---\n\nNotebooks are a great tool for exploration and for documenting your workflow.\nNotebooks allow you to write:\n- Code\n- Plots\n- Formatted text\n- Latex text for equations\n\nand much more in a single document!\n\n---\n\n- R is the programming language that runs computations.\n\n- Jupyter is an integrated development environment (IDE) that provides an interface by adding convenient features and tools.\n\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/38/Jupyter_logo.svg/1200px-Jupyter_logo.svg.png\" alt=\"jupyter logo\" align=\"left\" width=\"25%\" >\n\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/1b/R_logo.svg/1920px-R_logo.svg.png\" alt=\"R logo\" width=\"25%\" align=\"center\">\n\n---\n\nYou can think of Jupyter Notebooks as the dashboard of a car.\n\nYou don’t drive a car by interacting with the engine but rather by interacting with the car’s dashboard.\n\nIn the same way, rather than interacting with R directly, we will be using the Jupyter's interface.\n\nJupyter will allow us to:\n- Run R code interactively\n- Use other languages such as Python, Julia, or Matlab!\n\n---\n\nThis is what a Jupyter Notebook looks like:\n\n<img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module1/01_jupyter_notebook.png?raw=true\" alt=\"Jupyter Notebook shot\" width=75% align=\"center\">\n\n---\n\n- Notebooks are great for exploration and for documenting your workflow\n- There are many options for sharing notebooks in human readable format:\n  - Share online with [nbviewer.jupyter.org](http://nbviewer.jupyter.org/)\n  - Github renders automatically any notebooks that you push.\n  - You can convert to HTML, PDF, etc. with [nbconvert](https://nbconvert.readthedocs.io/en/latest/)\n\n---\n\n# Let's practice!\n","fields":{"slug":"/chapter1_01_introduction"}}},{"node":{"rawMarkdownBody":"\n# What is Binder?\n\nAlthough we can install software and dependencies in our local machine, we will be working with a Binder on this module. \n\n\n\nA Binder is a code repository that contains:\n\n- Code or content that you’d like people to run. This might be a Jupyter Notebook.\n\n- Configuration files for your environment. This ensures that your code is reproducible.\n\n---\n\nYou will be working simultaneously with the Binder notebook and these slides.\n\nYou can find the  <a href=\"https://mybinder.org/v2/gh/throughput-ec/ec-binder/HEAD\" target=\"_blank\">Binder</a>.\n\nClick on the previous link, the Binder will be launched. Choose to open a Jupyter Notebook and you must see the following:\n\n<img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module1/02_binder.png?raw=true\" alt=\"Jupyter Notebook shot\" width=55% align=\"center\">\n\n---\n\nKeep in mind that any work that you do on the Binder will not be saved.\nYou will have to download your work each time you work with the Binder.\n\n---\n\n# Explore the Jupyter Notebook in the <a href=\"https://mybinder.org/v2/gh/throughput-ec/ec-binder/HEAD\" target=\"_blank\">Binder</a>\n\n!","fields":{"slug":"/chapter1_02_using_binder"}}},{"node":{"rawMarkdownBody":"\n<div><h1><img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module1/00_ec_slide1.png?raw=true\" alt=\"EC Theme\" width=25% align=\"left\"/>Your First Notebook</h1></div>\n\n---\n\n### Create a New Notebook\n\n- Navigate to the `binder` repository. Here is the [link]('https://mybinder.org/v2/gh/throughput-ec/ec-binder/HEAD').\n\n- Under Notebooks, select R.\n- This will create a new untitled notebook\n  - Note the .ipynb extension (comes from \"interactive Python notebook\", the previous name before it was changed to Jupyter to reflect multi-language support)\n  - Rename the notebook to \"workshop.ipynb\"\n\n- Notebooks usually auto-save periodically, since we are in a Binder, all your new content will be lost once the Binder is closed.\n- You can download your notebooks by clicking on File -> Download\n---\n\n## Working with Notebooks\n\nA notebook consists of a series of \"cells\":\n- **Code cells**: execute snippets of code and display the output\n- **Markdown cells**: formatted text, equations, images, and more\n\nBy default, a new cell is always a code cell.\n\n---\n\n## Code Cells\n\nTo run a code cell, click in it and press `Shift-Enter` or press the Run button on the toolbar\n\nThis is an example of a Code Cell\n\n```r\n# Print something\nprint(\"Hello world\", quote = FALSE)\n```\n\n```out\nHello world\n```\n\n---\n\n## Markdown Cells\n\nIn Markdown cells, you can write plain text or add formatting and other elements with [Markdown](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet). These include headers, **bold text**, *italic text*, hyperlinks, equations $A=\\pi r^2$, inline code `print('Hello world!')`, bulleted lists, and more.\n\n\nThis is a markdown cell:\n```\nHello~!\n```\n---\n\n\n- To create a Markdown cell, select an empty cell and change the cell type from \"Code\" to \"Markdown\" in the dropdown menu on the toolbar\n- To run a Markdown cell, press `Shift-Enter` or the Run button on the toolbar\n- To edit a Markdown cell, you need to double-click inside it\n\n---\n\n## Other Notebook Basics\n\n- Organizating cells &mdash; insert, delete, cut/copy/paste, move up/down, split, merge\n- Running all cells or selected cell(s)\n- Restarting and interrupting the kernel\n- Caveat: Notebooks are nonlinear and running cells out of order can sometimes lead to unexpected results\n  - It's good practice to periodically restart the kernel and run all cells, making sure that everything works as expected when you run the whole notebook from top to bottom\n- Closing vs. shutting down a notebook &mdash; kernel process in background\n- Re-opening a notebook after shutdown\n  - All the code output is maintained from the previous kernel session\n- Clear output of all cells or selected cell(s)\n\n---\n\n# Let's practice!\n","fields":{"slug":"/chapter1_03_creating_a_notebook"}}},{"node":{"rawMarkdownBody":"\n<div><h1><img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module1/00_ec_slide1.png?raw=true\" alt=\"EC Theme\" width=25% align=\"left\"/> Lesson 0<br>Learning Outcomes</h1></div>\n\n---\n\n\nBy the end of this module, you should be able to:\n\n- Define data science, and the related terms reproducibile and audible analysis\n- Give examples of workflows that are considered reproducible and trustworthy in the context of a data analysis\n- Describe the data analysis cycle\n- Explain how to mechanistically start a data analysis project\n- State and refine a data analysis question\n\n---\n\n\n- Define the following 3 types of testing\n    - unit testing\n    - integration testing\n    - regression testing\n- Define continuous integration testing\n- Explain why continuous integration testing is superior to manually running tests\n- Define the following key concepts that underlie GitHub Actions: Actions, Workflow, Event, Runner, Job, Step\n\n---\n\n\n- Store and use GitHub Actions credentials safely via GitHub Secrets\n- Explain who owns the copyright of code they write in a give situation, and why\n- Choose an appropriate license for software (i.e., packages or analysis code)\n- Choose an appropriate license for your non-software materials\n\n---\n\n# Let's Get Started!","fields":{"slug":"/chapter9_00_learning_outcomes"}}},{"node":{"rawMarkdownBody":"\n<div><h1><img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module1/00_ec_slide1.png?raw=true\" alt=\"EC Theme\" width=25% align=\"left\"/> Lesson 1<br>File Names</h1></div>\n\n---\n\n# Three principles for (file) names:\n\n- Machine readable\n- Human readable\n- Plays well with default ordering\n\n---\n\n## Machine readable\n\n- Regular expression and globbing friendly\n- Avoid spaces, punctuation, accented characters, case sensitivity\n- Easy to compute on\n- Deliberate use of delimiters\n\n---\n\n## Machine readable Motivation \n\n- Easy to search for files later\n\n- Easy to narrow file lists based on names\n\n- Easy to extract info from file names, e.g. by splitting\n\n- New to regular expressions and globbing? be kind to yourself and avoid\n    + Spaces in file names\n    + Punctuation\n    + Accented characters\n    + Different files named `foo` and `Foo`\n\n---\n\n## Human readable\n\n- Name contains info on content\n\n- Connects to concept of a *slug* from semantic URLs\n\n---\n\n## Embrace the slug\n\nExamples of names\n```\n01_marshal-data.r\nhelper01_load-counts.r\n```\n\n---\n\n## Human readable Motivation\n\nEasy to figure out what a file is, based on its name\n\n---\n\n## Plays well with default ordering\n\n- Put something numeric first\n\n- Use the ISO 8601 standard for dates\n\n- Left pad other numbers with zeros\n\n**Examples**\n\nChronological order\n```\n```\n\nLogical order\n```\n```\n\nDates\n```\n```\n\n---\n\n## Left pad other numbers with zeros\n\nIf you don’t left pad, you get this:\n\n~~~\n10_final-figs-for-publication.R\n1_data-cleaning.R\n2_fit-model.R\n~~~\n\n---\n## Examples of Good and Bad Names\n\n**BIG NO**\n```\nmyabstract.docx\nJoe’s Filenames Use Spaces and Punctuation.xlsx\nfigure 1.png\nfig 2.png\nJW7d^(2sl@deletethisandyourcareerisoverWx2*.txt\n```\n\n**YES**\n```\n2014-06-08_abstract-for-sla.docx\njoes-filenames-are-getting-better.xlsx\nfig01_scatterplot-talk-length-vs-interest.png\nfig02_histogram-talk-attendance.png\n1986-01-28_raw-data-from-challenger-o-rings.txt\n```\n\nSource [Data Carpentry](https://datacarpentry.org/rr-organization1/01-file-naming/index.html)\n---\n\n# Let's Practice!\n","fields":{"slug":"/chapter9_01_filenames"}}},{"node":{"rawMarkdownBody":"\n<div><h1><img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module1/00_ec_slide1.png?raw=true\" alt=\"EC Theme\" width=25% align=\"left\"/> Lesson 4<br>Testing</h1></div>\n\n---\n\n## What is Testing?\n\n- Method to check whether the actual software product matches expected requirements\n- Ensures that software product is Defect free. \n- It involves execution of software components using manual or automated tools to evaluate properties of interest. \n- The purpose is to identify errors or missing requirements in contrast to actual requirements.\n\n---\n\n## Types of Testing\n\n- Unit testing  \n    - Tests whether an individual component of a piece of software works as expected.\n\n- Integration testing  \n    - Tests whether separate components of a piece of software, which depend upon eachother, work together as expected.\n\n- Regression testing\n    - Tests that recent changes do not break older features.\n\n---\n\n## Unit Testing\n\nHow can we be so sure that the code we wrote is doing what we want it to?\n\nDoes our code work 100% of the time?\n\n- The answer is: units tests.\n\n- In Python unit tests can be implemented using assert statements although there are other ways.\n\n- Let’s first discuss the syntax of an assert statement and then how they can be applied to the bigger concept, which is unit tests.\n\n---\n\n## Assert Statements\n\n``` python\nassert 1 == 2 , \"1 is not equal to 2.\"\n```\n\n``` out\nAssertionError: 1 is not equal to 2.\n\nDetailed traceback: \n  File \"<string>\", line 1, in <module>\n```\n\n---\n\n`assert` statements can be used as sanity checks for our program.\n\nWe implement them as a “debugging” tactic to make sure our code runs as\nwe expect it to.\n\nWhen Python reaches an `assert` statement, it evaluates the condition to\na Boolean value.\n\nIf the statement is `True`, Python will continue to run. However, if the\nBoolean is `False`, the code stops running, and an error message is\nprinted.\n\n\n---\n\n## Example 1\n\nLet’s take a look at an example where the Boolean is `True`.\n\n``` python\nassert 1 == 1 , \"1 is not equal to 1.\"\nprint('Will this line execute?')\n```\n\nWhat do you think the output will be?\n\n---\n\nAnswer: \n\n```out\nWill this line execute?\n```\n\nHere, since the `assert` statement results in a `True` values, Python\ncontinues to run, and the next line of code is executed.\n\n---\n\n## Example 2\n\n``` python\nassert 1 == 2 , \"1 is not equal to 2.\"\nprint('Will this line execute?')\n```\n\nWhat do you think the output will be?\n\n---\n\nAnswer: \n\n``` out\nAssertionError: 1 is not equal to 2.\n\nDetailed traceback: \n  File \"<string>\", line 1, in <module>\n```\n\n\nWhen an assert is thrown due to a Boolean evaluating to `False`, the\nnext line of code does not get an opportunity to be executed.\n\n---\n\n## When to test?\n\n\n- You probably are used to creating a function, and only after that,  you might want to write the tests.\n\n- Actually, writing tests should be done *before* the actual function. This is called Test-Driven Development.\n\n- This may seem a little counter-intuitive, but we’re creating the  expectations of our function before the actual function code.\n\n- Often we have an idea of what our function should be able to do and what output is expected.\n\n- Writing tests before the function, help understand what code is needed and it avoids encountering large bugs down the line.\n\n- It is recommended to write multiple tests.\n\n---\n\n## What to test?\n\n- Keep these tests simple - things that we know are true or\ncould be easily calculated by hand.\n\nFor example, let’s look at our `exponent_a_list()` function.\n\nEasy cases for this function would be lists containing numbers that we\ncan easily square or cube.\n\nFor example, we expect the square output of `[1, 2, 4, 7]` to be\n`[1, 4, 16, 49]`.\n\n---\n\n``` python\ndef exponent_a_list(numerical_list, exponent=2):\n    new_exponent_list = list()\n    \n    for number in numerical_list:\n        new_exponent_list.append(number ** exponent)\n    \n    return new_exponent_list\n```\n\n``` python\nassert exponent_a_list([1, 2, 4, 7], 2) == [1, 4, 16, 49], \"incorrect output for exponent = 2\"\n```\n\n``` python\nassert exponent_a_list([1, 2, 3], 3) == [1, 8, 27], \"incorrect output for exponent = 3\"\n```\n\n``` python\nassert type(exponent_a_list([1,2,4], 2)) == list, \"output type not a list\"\n```\n\n---\n\n## Systematic Approach\n\nWe use a **systematic approach** to design our function using a general\nset of steps to follow when writing programs.\n\n***1. Write the function stub: a function that does nothing but accepts\nall input parameters and returns the correct datatype.***\n\n``` python\ndef exponent_a_list(numerical_list, exponent=2):\n    return list()\n```\n\n---\n\n***2. Write tests to satisfy the design specifications.***\n\n``` python\ndef exponent_a_list(numerical_list, exponent=2):\n    return list()\n   \nassert type(exponent_a_list([1,2,4], 2)) == list, \"output type not a list\"\nassert exponent_a_list([1, 2, 4, 7], 2) == [1, 4, 16, 49], \"incorrect output for exponent = 2\"\nassert exponent_a_list([1, 2, 3], 3) == [1, 8, 27], \"incorrect output for exponent = 3\"\n```\n\n``` out\nAssertionError: incorrect output for exponent = 2\n\nDetailed traceback: \n  File \"<string>\", line 1, in <module>\n```\n\n---\n\n***3. Outline the program with pseudo-code.***\n\n``` python\ndef exponent_a_list(numerical_list, exponent=2):\n\n    # create a new empty list\n    # loop through all the elements in numerical_list\n    # for each element calculate element ** exponent\n    # append it to the new list \n    \n    return list()\n    \nassert type(exponent_a_list([1,2,4], 2)) == list, \"output type not a list\"\nassert exponent_a_list([1, 2, 4, 7], 2) == [1, 4, 16, 49], \"incorrect output for exponent = 2\"\nassert exponent_a_list([1, 2, 3], 3) == [1, 8, 27], \"incorrect output for exponent = 3\"\n```\n\n``` out\nAssertionError: incorrect output for exponent = 2\n\nDetailed traceback: \n  File \"<string>\", line 1, in <module>\n```\n\n---\n\n***4. Write code and test frequently.***\n\n``` python\ndef exponent_a_list(numerical_list, exponent=2):\n    new_exponent_list = list()\n    \n    for number in numerical_list:\n        new_exponent_list.append(number ** exponent)\n    \n    return new_exponent_list\n    \nassert type(exponent_a_list([1,2,4], 2)) == list, \"output type not a list\"\nassert exponent_a_list([1, 2, 4, 7], 2) == [1, 4, 16, 49], \"incorrect output for exponent = 2\"\nassert exponent_a_list([1, 2, 3], 3) == [1, 8, 27], \"incorrect output for exponent = 3\"\n```\n\n---\n\n***5. Write documentation.***\n\n``` python\ndef exponent_a_list(numerical_list, exponent=2):\n    \"\"\" Creates a new list containing specified exponential values of the input list. \n    \n    Parameters\n    ----------\n    numerical_list : list\n        The list from which to calculate exponential values from\n    exponent : int or float, optional\n        The exponent value (the default is 2, which implies the square).\n    \n    Returns\n    -------\n    new_exponent_list : list\n        A new list containing the exponential value specified of each of\n        the elements from the input list \n        \n    Examples\n    --------\n    >>> exponent_a_list([1, 2, 3, 4])\n    [1, 4, 9, 16]\n    \"\"\"\n    new_exponent_list = list()\n    for number in numerical_list:\n        new_exponent_list.append(number ** exponent)\n    return new_exponent_list\n```\n\n--- \n\n## Organizing tests\n\nTests are organised hierarchically: expectations are grouped into tests which are organised in files:\n\nAn expectation is the atom of testing:\n- It describes the expected result of a computation. Examples:\n    - Does it have the right value and right class? \n    - Does it produce error messages when it should? \n    \nA test groups together multiple expectations to test the output from a simple function.\nThis is why they are sometimes called unit as they test one unit of functionality. \n\n---\n\n## Tools for Testing\n\nThere are automated tools we can take advantage of: \n- `pytest` and `asssert` for Python\n- `testthat` for R\n\n---\n\n# Let's practice what we learned!\n","fields":{"slug":"/chapter9_04_testing"}}},{"node":{"rawMarkdownBody":"\n<div><h1><img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module1/00_ec_slide1.png?raw=true\" alt=\"EC Theme\" width=25% align=\"left\"/> Lesson 8<br>Software Licensing</h1></div>\n\n---\n\n## Copyright Law\n\nIn both the US and Canada, software code falls under copyright law.\n\nThe owner of the copyright can decide how this code may be used, copied, distributed, changed, among other activities.\n\nWarning!\nCopyright protects the language and words used to express ideas, concepts and themes.\nIt does not protect not the ideas, concepts or themes themselves.\n\n---\n\n## Copyright Owner Rights\n\nIn the USA, the owner of copyright has the exclusive right to do and to authorize others to do the following:\n\n- To reproduce the work in copies or phonorecords;\n- To prepare derivative works based upon the work;\n- To distribute copies or phonorecords of the work to the public by sale or other transfer of ownership, or by rental, lease, or lending;\n- To publicly perform the work, in the case of literary, musical, dramatic, and choreographic works, pantomimes, and motion pictures and other audiovisual works;\n- To publicly display the work, in the case of literary, musical, dramatic, and choreographic works, pantomimes, and pictorial, graphic, or sculptural works, including the individual images of a motion picture or other audiovisual work.\n- To digitally transmit sound recordings by means of digital audio transmission.\n\n[Copyright Law of the USA](https://en.wikipedia.org/wiki/Copyright_law_of_the_United_States#Exclusive_rights)\n\n---\n\n## Who has copyright ownership? \n\n- You if you are author the code and you are doing this for yourself (i.e., not for your work)\n\n- In such a case, you (the person who typed the code) automatically become the copyright owner.\n\n    - In the USA, you do not need to use the copyright symbol © .\n\n    - Best practices: Use the copyright symbol along with your name and the year of first publication.\n\n    - Register tools that you publicate at USA Copyright Registration Portal\n\n---\n\n- The employer or client if you were doing a job for them.\n\n- Implications if you would like to reuse a code that you did for your employer in a different situation:\n    - Negotiate a licence to use the code you wrote.\n\n---\n\n## Why do I need a license?\n\nAs mentioned above, creative works (like software code) are automatically eligible for intellectual property (and thus copyright) protection\n\nReusing creative works without a license is dangerous, because the copyright holders could sue you for copyright infringement\n\nThus, if you publicly share your creative work (i.e., software code), you should let others know if and how they can reuse it\n\nThis is done via the inclusion of a LICENSE or LICENSE.txt file in the base directory of the repository that clearly states under which license the content is being made available\n\nUnless you include a license that specifies otherwise, nobody else can copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation.\n\n---\n\n## How do licenses work?\n\nA license grants rights to others (the licensees) that they would otherwise not have. What rights are being granted under which conditions differs, often only slightly, from one license to another.\n\nLicenses are legal documents and written by legal experts. But you can choose an already written one that best suits your situation.\n\n---\n\n## Choosing a License\n\nIn practice, a few [licenses](https://choosealicense.com/licenses/) are by far the most popular, and [choosealicense.com](https://choosealicense.com/) will help you find a common license that suits your needs. \n\n- [Very Simple and Permisive](https://choosealicense.com/licenses/mit/)\n\n- [Existing projects and communities](https://choosealicense.com/community/)\n\n- [Sharing Improvements](https://choosealicense.com/licenses/gpl-3.0/)\n\n\nFor visualizations, reports, presentations, or tutorials, use [The Creative Commons licences](https://creativecommons.org/licenses/).\n\nThey are now widely used in academia and the publishing industry.\n\n---\n\n# Let's practice what we learned!","fields":{"slug":"/chapter9_06_software_licensing"}}},{"node":{"rawMarkdownBody":"\n<div><h1><img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module1/00_ec_slide1.png?raw=true\" alt=\"EC Theme\" width=25% align=\"left\"/> What We Learned</h1></div>\n\n---\n\n\n---\n\n# Let's practice what we learned!","fields":{"slug":"/chapter9_07_what_we_learned"}}},{"node":{"rawMarkdownBody":"\n<div><h1><img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module1/00_ec_slide1.png?raw=true\" alt=\"EC Theme\" width=25% align=\"left\"/> Lesson 2<br>Project Organization</h1></div>\n\n---\n\n## Data analysis workflow \n\n![workflow](https://datacarpentry.org/rr-organization1/fig/workflow.png)\n\n---\n\n## Face it...\n\n- There are going to be files\n\n- LOTS of files\n\n- The files will change over time\n\n- The files will have relationships to each other\n\n---\n\n## For Your Inner Self\n\n- File organization and naming is a mighty weapon against chaos\n\n- Make a file's name and location VERY INFORMATIVE about what it is, why it exists, how it relates to other things\n\n- The more things are self-explanatory, the better\n\n---\n\n## Organizing your data analysis workflow\n\n**Raw data -> data**\n\nPick a strategy, any strategy, just pick one!\n\n<div class=\"columns-2\">\n\n![workflow_raw_data_to_data](https://datacarpentry.org/rr-organization1/fig/workflow_raw_data_to_data.png)\n\n~~~\ndata\ndata-raw\ndata-clean\ndata/\n  - raw\n  - clean\n~~~\n\n</div>\n\n---\n\n## Data -> results\n\nPick a strategy, any strategy, just pick one!\n\n<div class=\"columns-2\">\n\n![workflow_data_to_results_1](https://datacarpentry.org/rr-organization1/fig/workflow_data_to_results_1.png)\n\n~~~\ncode\nscripts\nanalysis\nbin\n~~~\n</div>\n\n---\n\n## Data -> results\n\nPick a strategy, any strategy, just pick one!\n\n<div class=\"columns-2\">\n\n![workflow_data_to_results_2](https://datacarpentry.org/rr-organization1/fig/workflow_data_to_results_2.png)\n\n~~~\nfigures\nresults\nresults/\n  - figs\n  - nums\nfigures\ntables\n~~~\n</div>\n\n---\n\n## A real (and imperfect!) example\n\n~~~\n  /Users/jenny/research/bohlmann/White_Pine_Weevil_DE:\n  total used in directory 246648 available 131544558\n  drwxr-xr-x  14 jenny  staff        476 Jun 23  2014 .\n  drwxr-xr-x   4 jenny  staff        136 Jun 23  2014 ..\n  -rw-r--r--@  1 jenny  staff      15364 Apr 23 10:19 .DS_Store\n  -rw-r--r--   1 jenny  staff  126231190 Jun 23  2014 .RData\n  -rw-r--r--   1 jenny  staff      19148 Jun 23  2014 .Rhistory\n  drwxr-xr-x   3 jenny  staff        102 May 16  2014 .Rproj.user\n  drwxr-xr-x  17 jenny  staff        578 Apr 29 10:20 .git\n  -rw-r--r--   1 jenny  staff         50 May 30  2014 .gitignore\n  -rw-r--r--   1 jenny  staff       1003 Jun 23  2014 README.md\n  -rw-r--r--   1 jenny  staff        205 Jun  3  2014 White_Pine_Weevil_DE.Rproj\n  drwxr-xr-x  20 jenny  staff        680 Apr 14 15:44 analysis\n  drwxr-xr-x   7 jenny  staff        238 Jun  3  2014 data\n  drwxr-xr-x  22 jenny  staff        748 Jun 23  2014 model-exposition\n  drwxr-xr-x   4 jenny  staff        136 Jun  3  2014 results\n~~~\n\n---\n\n## Data\n\nReady to analyze data:\n\n![sample_ready_to_analyze_data](https://datacarpentry.org/rr-organization1/fig/sample_ready_to_analyze_data.png)\n\n<hr>\n\nRaw data:\n\n![sample_raw_data](https://datacarpentry.org/rr-organization1/fig/sample_raw_data.png)\n\n\n---\n\n## Analysis and figures\n\nR scripts + the Markdown files from \"Compile Notebook\":\n\n![sample_ready_to_analyze_data](https://datacarpentry.org/rr-organization1/fig/sample_ready_to_analyze_data.png)\n\n<hr>\n\nThe figures created in those R scripts and linked in those Markdown files:\n\n![sample_raw_data](https://datacarpentry.org/rr-organization1/fig/sample_raw_data.png)\n\n## Scripts\n\nLinear progression of R scripts, and Makefile to run the entire analysis:\n\n![sample_scripts](https://datacarpentry.org/rr-organization1/fig/sample_scripts.png)\n\n## Results\n\nTab-delimited files with one row per gene of parameter estimates, test statistics, etc.:\n\n![sample_results](https://datacarpentry.org/rr-organization1/fig/sample_results.png)\n\n## Expository files\n\nFiles to help collaborators understand the model we fit: some markdown docs, a Keynote presentation, Keynote slides exported as PNGs for viewability on GitHub:\n\n![sample_expository](https://datacarpentry.org/rr-organization1/fig/sample_expository.png)\n\n---\n\n## Caveats / problems with this example\n\n- This project is no where near done, i.e. no manuscript or publication-ready figs\n\n- File naming has inconsistencies due to three different people being involved\n\n- Code and reports/figures all sit together because it’s just much easier that way w/ knitr & rmarkdown\n\n---\n\n## Wins of this example\n\n- I can walk away from the project and come back to it a year later and resume work fairly quickly\n\n- The two other people were able to figure out what I did and decide which files they needed to look at, etc.\n\n---\n\n## Tip: Life cycle of data\n\nHere’s how most data analyses go down in reality:\n\n- You get raw data\n\n- You explore, describe and visualize it\n\n- You diagnose what this data needs to become useful\n\n- You fix, clean, marshal the data into ready-to-analyze form\n\n- You visualize it some more\n\n- You fit a model or whatever and write lots of numerical results to file\n\n- You make prettier tables and many figures based on the data & results accumulated by this point\n\nBoth the data file(s) and the code/scripts that acts on them reflect this progression\n\n---\n\n## Prepare data -> Do stats -> Make tables & figs\n\nThe R scripts:\n\n~~~\n01_marshal-data.r\n02_pre-dea-filtering.r\n03_dea-with-limma-voom.r\n~~~\n\n<hr>\n\nThe figures left behind:\n\n~~~\n02_pre-dea-filtering-preDE-filtering.png\n03-dea-with-limma-voom-voom-plot.png\n04_explore-dea-results-focus-term-adjusted-p-values1.png\n04_explore-dea-results-focus-term-adjusted-p-values2.png\n~~~\n\nFile organization should reflect inputs vs outputs and the flow of information\n\nSource [Data Carpentry](https://datacarpentry.org/rr-organization1/02-file-organization/index.html)\n---\n\n# Let's Practice!","fields":{"slug":"/chapter9_02_project_organization"}}},{"node":{"rawMarkdownBody":"\n<div><h1><img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module1/00_ec_slide1.png?raw=true\" alt=\"EC Theme\" width=25% align=\"left\"/> Lesson 3<br>Data Workflows</h1></div>\n\n---\n## Dealing with Data\n\nData Science is the study, development and practice of reproducible and auditable processes to obtain insight from data. $^1$\n\nFrom this definition, we must also define reproducible and auditable analysis:\n\nReproducible analysis:\nreaching the same result given the same input, computational methods and conditions. $^2$\n\n~~~\ninput = data\ncomputational methods = computer code\nconditions = computational environment (e.g., programming language & it's dependencies)\nAuditable/transparent analysis,\na readable record of the steps used to carry out the analysis as well as a record of how the analysis methods evolved .\n~~~\n\n1. [National Academies of Sciences, 2019](https://www.nap.edu/catalog/25303/reproducibility-and-replicability-in-science)\n2. [Parker, 2017](https://peerj.com/preprints/3210/) and [Ram, 2013](https://scfbm.biomedcentral.com/articles/10.1186/1751-0473-8-7)\n\n---\n## Motivation\n\nData products can be built via other methods, but we lack confidence in how the results or products were created.\n\nWe believe this stems from non-reproducible and non-auditable analyses:\n\n- lacking evidence that the results or product could be regenerated given the same input computational methods, and conditions\n\n- lacking evidence of the steps taken during creation\n\n- having an incomplete record of how and why analysis decisions were made\n\n---\n\n## Making Data Science Trustworthy\n\n- It should be reproducible and auditable\n- It should be correct\n- It should be fair, equitable and honest\n\n---\n\n## When Research Goes Wrong\n\nAn example with large impact\n\nRETRACTED ARTICLE: Safety and efficacy of favipiravir versus hydroxychloroquine in management of COVID-19: A randomised controlled trial\n\nA research paper was published in March 2021 that claimed that a drug, Favipiravir, was a safe and effective alternative to another drug, hydroxychloroquine (a medication commonly used to prevent or treat malaria), in mild or moderate COVID-19 infected patients.\n\n---\n\n## When Research Goes Wrong\n\nIn September, 2021 the paper we retracted by the editors - in part due to reproducibility issues:\n\n\"After concerns were brought to the Editors' attention after publication, the raw data underlying the study were requested. The authors provided several versions of their dataset. Post-publication peer review confirmed that none of these versions fully recapitulates the results presented in the cohort background comparisons, casting doubt on the reliability of the data. Additional concerns were raised about the randomisation procedure, as the equal distribution of male and female patients is unlikely unless sex is a parameter considered during randomisation. However, based on the clarification provided by the authors, sex was not considered during this process. The Editors therefore no longer have confidence in the results and conclusions presented.\"\n\n---\n\n## When Research Goes Wrong\n\nThe problem doesn't just stop once the article is retracted. Between the time the article was published and retracted, the article was cited 17 times!\n\nThe use of non-reproducible tools can impact government and industry as well! \n\n---\n\n## Workflows Importance\n\n- It makes it easier to collaborate with your most imporant collaborator - YOU in 6 months!\n- It makes others think you know what you are doing.\n\n---\n\n## Workflows & complex projects\n\nComplex projects have at least one item of the following list:\n\n- two, or more, people directly working on the analysis\n- projects that involve two or more coding documents\n- projects that involve analysis of medium/large data\n- projects where you are working on a remote machine\n- projects that have many software or environment dependencies\n\nAs a project accumulates more of these features it grows further in complexity.\n\n---\n\nComplex projects without intentional Data Science workflows can result in:\n\n- An result that you cannot recreate.\n- Spare files of information related to the project that only you have access to.\n- A small change to the analysis code requires re-running the entire program taking several hours.\n- Code that can only be run on one machine (The \"But it runs on my computer\" problem)\n\n---\n\n## Avoiding the Chaos\nUse:\n- Version Control (Git & GitHub)\n- Write Executable analysis scripts & pipelines (Python/R scripts)\n- Defined & shippable dependencies as we saw (Docker)\n\n\n---\n\n## Version Control\n\n- Use GitHub Issues for communications related to the project\n- Version control contributes to better communication & team work\n- All collaborators/team members know where to find the latest (or earlier) version of the analysis (code and output)\n\nAll collaborators/team members have access to all communications associated with the analysis\n\n---\n\n## Executable analysis scripts & pipelines\n\nAs analysis grows in length and complexity, one literate code document generally is not enough\n\nTo improve code report readability (and code reproducibility and modularity) it is better to abstract at least parts of the code away (e.g, to scripts)\n\nThese scripts save figures and tables that will be imported into the final report\n\nExample problem solved by executable analysis scripts & pipelines\nProblem: A small change to the analysis code requires re-running the entire thing, and takes hours.\n\nSolution: Use a smart dependency tree tool to only re-run the parts that needs to be updated.\n\n---\n\n## Defined & shippable dependencies\n\nDependencies are other things one need to install to run your code, and includes:\n- programming languages (e.g., R, Python, Julia, etc)\n- packages from programming languates (e.g., tidyverse, scikit-learn)\n- Dependencies include versions too\n\nExample problem solved by defined & shippable dependencies\nProblem: Code that can only be run on one machine, and you don't know why.\n\n---\n\n## Life cycle of a data analysis project\n\nIt is also critical that you match the correct data science methods to the type of statistical question you are asking.\n\n---\n\n## Descriptive\n\nOne that seeks to summarize a characteristic of a set of data. No interpretation of the result itself as the result is a fact, an attribute of the data set you are working with.\n\nExamples:\n\nHow many people live in each US state?\n\n---\n\n## Exploratory\n\nOne in which you analyze the data to see if there are patterns, trends, or relationships between variables looking for patterns that would support proposing a hypothesis to test in a future study.\n\nExamples:\n\nDoes air pollution correlate with life expectancy in a set of data collected from groups of individuals from several regions in the United States?\n\n---\n\n## Inferential\n\nOne in which you analyze the data to see if there are patterns, trends, or relationships between variables in a representative sample. We want to quantify how much the patterns, trends, or relationships between variables is applicable to all individuals units in the population.\n\nExamples:\n\nIs eating at least 5 servings a day of fresh fruit and vegetables is associated with fewer viral illnesses per year?\n\n---\n\n## Predictive\n\nOne where you are trying to predict measurements or labels for individuals (people or things). Less interested in what causes the predicted outcome, just what predicts it.\n\nExamples:\n\nHow many viral illnesses will someone have next year?\n\n---\n\n## Causal\n\nAsks about whether changing one factor will change another factor, on average, in a population. Sometimes the underlying design of the data collection, by default, allows for the question that you ask to be causal (e.g., randomized experiment or trial)\n\nExamples:\n\nDoes smoking lead to cancer?\n\n---\n\n## Mechanistic\n\nOne that tries to explain the underlying mechanism of the observed patterns, trends, or relationship (how does it happen?)\n\nExamples:\n\nHow does how airplane wing design changes air flow over a wing, leading to decreased drag?\n\n---\n\n## What happens next?\n\nKnowing the kind of question you are trying to answer, helps narrow down the possibilities of the kind of analysis you might want to do.\n\nFor example, if you have the question: \"How many viral illnesses will someone have next year?\" and you identify that it is predictive. You could narrow down that some kind of statistical or machine learning model might help you answer that.\n\nThen you need to go a step deeper and look at the data that you have, and see which kind of statistical or machine learning model is most suitable for your data.\n\n---\n\n# Let's Practice What We Learned","fields":{"slug":"/chapter9_03_ds_workflows"}}},{"node":{"rawMarkdownBody":"\n<div><h1><img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module1/00_ec_slide1.png?raw=true\" alt=\"EC Theme\" width=25% align=\"left\"/> Lesson 7<br>Introduction to CI/CD and Github Actions</h1></div>\n\n---\n\n## Continuous Integration (CI)\n\n- CI is the practice of frequently integrating code changes from contributors to a shared repository. \n- Often the submission of code to a shared repository is combined with automated testing to increase code dependability and quality.\n\n**Why use CI + automated testing**\n\n- detects errors sooner\n- reduces the amount of code to be examined when debugging\n- facilitates merging\n- ensures new code additions do not introduce errors\n\n--- \n\n## Continous Development (CD)\n\n- Defined as the practice of automating the deployment of software that has successfully run through your test-suite.\n\n- For example, upon merging a pull request to master, an automation process builds the Python package and publishes to PyPI without further human intervention.\n\n**Why use CD?**\n\n- little to no effort in deploying new version of the software allows new features to be rolled out quickly and frequently\n\n- allows for quick implementation and release of bug fixes\n\n- deployment can be done by many contributors\n\n---\n\n## GitHub Actions \n\n- It is a continuous integration and continuous development (CI/CD) platform that allows you to automate your build, test, and deployment pipeline.\n\n- A tool for automating software development tasks, located in the same place where you already store your code.\n\n- You can create workflows that build and test every pull request to your repository, or deploy merged pull requests to production.\n\n- GitHub Actions lets you run workflows when other events happen in your repository. For example, you can run a workflow to automatically add the appropriate labels whenever someone creates a new issue in your repository.\n\n- GitHub provides Linux, Windows, and macOS virtual machines to run your workflows, or you can host your own self-hosted runners in your own data center or cloud infrastructure.\n\n---\n\n## Key concepts:\n\n- Actions: Individual tasks you want to perform.\n\n- Workflow: A collection of actions (specified together in one file).\n\n- Event: Something that triggers the running of a workflow.\n\n- Runner: A machine that can run the Github Action(s).\n\n- Job: A set of steps executed on the same runner.\n\n- Step: A set of commands or actions which a job executes.\n\n---\n\n## Create an example workflow\n\n1. Create a new public GitHub.com repository.\n\n2. Click on the “Actions” tab\n\n3. Click on the first “Simple workflow” configure button\n\n<a href=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module7/00_github_actions.png?raw=true\" target=\"_blank\">\n<img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module7/00_github_actions.png?raw=true\" alt=\"GH Actions\" width=45% align=\"center\" title=\"Click to zoom in\"> \n</a>\n\n---\n\n4. Click on the two green commit buttons to add this workflow file\n\n<a href=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module7/01_github_actions.png?raw=true\" target=\"_blank\">\n<img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module7/01_github_actions.png?raw=true\" alt=\"Commits\" width=45% align=\"center\" title=\"Click to zoom in\"> \n\n---\n\n5. Go back to the “Actions” tab. It now looks different:\n\n<a href=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module7/02_github_actions.png?raw=true\" target=\"_blank\">\n<img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module7/02_github_actions.png?raw=true\" alt=\"Actions\" width=45% align=\"center\" title=\"Click to zoom in\"> \n\n\n---\n\n6. Click on the message associated with the event that created the action:\n\n<a href=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module7/03_github_actions.png?raw=true\" target=\"_blank\">\n<img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module7/03_github_actions.png?raw=true\" alt=\"Message\" width=45% align=\"center\" title=\"Click to zoom in\"> \n\n---\n\n7. Click on the build link:\n\n<a href=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module7/04_github_actions.png?raw=true\" target=\"_blank\">\n<img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module7/04_github_actions.png?raw=true\" alt=\"Actions\" width=45% align=\"center\" title=\"Click to zoom in\"> \n\n---\n\n8. Click on the arrow inside the build logs to expand a section and see the output of the action Check all of the arrows and see what happens at each step.\n\n<a href=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module7/05_github_actions.png?raw=true\" target=\"_blank\">\n<img src=\"https://github.com/throughput-ec/ec-workshops/blob/main/static/module7/05_github_actions.png?raw=true\" alt=\"Actions\" width=45% align=\"center\" title=\"Click to zoom in\"> \n\n---\n\n## GitHub Actions workflow file\n\nA YAML file that lives in the .github/workflows directory or your repository which speciies your workflow.\n\nA basic example of this yaml file:\n\n```\nname: learn-github-actions\non: [push]\njobs:\n  check-bats-version:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      - run: npm install -g bats\n      - run: bats -v\n```\n\n---\n\n## Understanding the file\n\n|                            |                          |\n| ----------------- | -----------------------------|\n| name: learn-github-actions |  Optional - The name of the workflow as it will appear in the Actions tab of the GitHub repository.  |\n| on: [push]        | Specifies the trigger for this workflow. This example uses the push event, so a workflow run is triggered every time someone pushes a change to the repository  |\n| jobs:  | Groups together all the jobs that run in the learn-github-actions workflow. |\n| check-bats-version: | Defines a job named check-bats-version. The child keys will define properties of the job. |\n|  runs-on: ubuntu-latest | Configures the job to run on the latest version of an Ubuntu Linux runner. This means that the job will execute on a fresh virtual machine hosted by GitHub. |\n| steps:  | Groups all the steps that run in the check-bats-version job. |\n|  uses: actions/checkout@v2  | The uses keyword specifies that this step will run v2 of the actions/checkout action. |\n| uses: actions/setup-node@v2 with: node-version: '14' | This step uses the actions/setup-node@v2 action to install the specified version of the Node.js (this example uses v14). This puts both the node and npm commands in your PATH. |\n| run: npm install -g bats | The run keyword tells the job to execute a command on the runner. |\n| run: bats -v | Run the bats command with a parameter that outputs the software version.  |\n\n\n---\n# Let's practice what we learned!\n","fields":{"slug":"/chapter9_05_github_actions"}}}]}}}