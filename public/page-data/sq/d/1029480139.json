{"data":{"site":{"siteMetadata":{"testTemplate":"from wasabi import msg\nfrom black import format_str, FileMode\n\nfile_mode = FileMode()\n\ndef blacken(code):\n    try:\n        return format_str(code, mode=file_mode)\n    except:\n        return code\n\n__msg__ = msg\n__solution__ = blacken(\"\"\"${solution}\"\"\")\n\n${solution}\n\n${test}\n\ntry:\n    test()\nexcept AssertionError as e:\n    __msg__.fail(e)","juniper":{"repo":"LinkedEarth/ec_workshops_py","branch":"binder","kernelType":"python3","lang":"python","debug":false}}},"allCode":{"edges":[{"node":{"name":"exc_01_01","code":"------------\n"}},{"node":{"name":"solution_01_01","code":"print(\"I love doing paleoclimate research with Python\")\n"}},{"node":{"name":"exc_01_02","code":"mylist =[___]\n\nfor item in ___:\n    print(___)\n"}},{"node":{"name":"solution_01_02","code":"mylist = ['Marine Sediment', 'Coral', 'Ice', 'Wood']\n\nfor item in mylist:\n    print(\"I study paleoclimate using \"+item)\n"}},{"node":{"name":"test_01_03","code":"def test():\n    # Here we can either check objects created in the solution code, or the\n    # string value of the solution, available as __solution__. A helper for\n    # printing formatted messages is available as __msg__. See the testTemplate\n    # in the meta.json for details.\n\n    # If an assertion fails, the message will be displayed\n    assert list(dataset1.keys())==['archiveType', 'geo', 'data'], \"Keys are incorrect\"\n    assert type(dataset1['geo']) == dict, 'geo should be a dictionary'\n    assert list(dataset1['geo'].keys())==['lat', 'lon'], 'The keys of the \"geo\" dictionary are incorrect'\n    assert type(dataset1['data']) == dict, 'data should be a dictionary'\n    assert list(dataset1['data'].keys())==['values', 'units'], 'The keys of the \"data\" dictionary are incorrect'\n    assert dataset1[\"archiveType\"] == \"marinesediment\", \"archiveType is incorrect\"\n    assert dataset1[\"geo\"]['lat'] == -5, \"lat is incorrect\"\n    assert dataset1[\"geo\"]['lon'] == 140, \"lon is incorrect\"\n    assert dataset1[\"data\"]['units'] == 'N/A', \"units is incorrect\"\n    assert type(dataset1[\"data\"]['values']) == list, \"The data values should be a list\"\n    assert dataset1[\"data\"]['values'] == [1,2,3], \"The data values are incorrect\"\n    assert latitude == -5, \"latitude is incorrect\"\n\n    __msg__.good(\"Well done!\")\n"}},{"node":{"name":"solution_01_03","code":"#Create the dictionary\n\ndataset1 = {\n            \"archiveType\":\"marinesediment\",\n            \"geo\":{\"lat\":-5,\"lon\":140},\n            \"data\":{\"values\":[1,2,3],\"units\":\"N/A\"}\n            }\n\nprint(dataset1)\n# return latitude into a variable\n\nlatitude = dataset1[\"geo\"][\"lat\"]\n\nprint(latitude)\n"}},{"node":{"name":"exc_01_03","code":"# Create the dictionary\n\ndataset1 = {\n            \"archiveType\":_____,\n            _____________,\n            }\n\nprint(dataset1)\n# return latitude into a variable\n\nlatitude = _________\n\nprint(latitude)\n"}},{"node":{"name":"exc_01_05","code":"import ________ as np\n\ntime = np._______(__,__,__)\ntime_index = _______\n"}},{"node":{"name":"solution_01_05","code":"import numpy as np\n\ntime = np.linspace(0,1000,1001)\ntime_index = time[20]\n"}},{"node":{"name":"test_01_05","code":"import numpy as np\n\ndef test():\n    # Here we can either check objects created in the solution code, or the\n    # string value of the solution, available as __solution__. A helper for\n    # printing formatted messages is available as __msg__. See the testTemplate\n    # in the meta.json for details.\n\n    # If an assertion fails, the message will be displayed\n    assert time == np.linspace(0,1000,1001), 'Time is not set properly'\n    assert time_index == time[20], 'Wrong index'\n\n    __msg__.good(\"Well done!\")\n"}},{"node":{"name":"exc_01_04","code":"# Create the dictionary\n\nmydict = {'archiveType':'coral',\n        'Publication':{'author':'J. Doe','title':'The most important record'}}\n\n#print the keys\n\nmydict.keys()\n"}},{"node":{"name":"exc_03_01","code":"import ________ as np\n\ntime = np._______(__,__,__)\nvalue = ____\n\nprint(time)\nprint(value)\n"}},{"node":{"name":"solution_03_01","code":"import numpy as np\n\ntime = np.arange(1,2001,1)\nvalue = np.sin(2*np.pi*1/20*time)\n\nprint(time)\nprint(value)\n"}},{"node":{"name":"test_03_01","code":"import numpy as np\n\ndef test():\n    # Here we can either check objects created in the solution code, or the\n    # string value of the solution, available as __solution__. A helper for\n    # printing formatted messages is available as __msg__. See the testTemplate\n    # in the meta.json for details.\n\n    # If an assertion fails, the message will be displayed\n    np.testing.assert_allclose(value, np.sin(2*np.pi*1/20*time),err_msg='incorrect value vector')\n    np.testing.assert_allclose(time, np.arange(1,2001,1),err_msg='incorrect time vector')\n\n    __msg__.good(\"Well done!\")\n"}},{"node":{"name":"solution_03_02","code":"import numpy as np\nfrom numpy.random import default_rng\n\nrng = default_rng(10) #seed to obtain same value for the distribution\n\n\ntime = np.arange(1,2001,1)\nvalue = np.sin(2*np.pi*1/20*time)\n\nwhite_noise = rng.normal(0, np.sqrt(np.var(value)/2), size=np.size(value))\n\nvalue2 = value+white_noise\n\nprint(time)\nprint(value2)\n"}},{"node":{"name":"exc_03_02","code":"import ______ as np\nfrom numpy.random import default_rng\n\nrng = default_rng(10) #seed to obtain same value for the distribution\n\n\ntime = np.arange(___,___,___)\nvalue = _________\n\nwhite_noise = rng.normal(___,____,______)\n\nvalue2 = _________\n\nprint(time)\nprint(value2)\n"}},{"node":{"name":"test_03_02","code":"import numpy as np\nfrom numpy.random import default_rng\n\ndef test():\n    # Here we can either check objects created in the solution code, or the\n    # string value of the solution, available as __solution__. A helper for\n    # printing formatted messages is available as __msg__. See the testTemplate\n    # in the meta.json for details.\n\n    # If an assertion fails, the message will be displayed\n    rng = default_rng(10)\n    white_noise_ans = rng.normal(0, np.sqrt(np.var(value)/2), size=np.size(value))\n\n    np.testing.assert_allclose(value2, value+white_noise_ans,err_msg='incorrect value vector')\n    \n    __msg__.good(\"Well done!\")\n"}},{"node":{"name":"solution_03_03","code":"import numpy as np\n\n\ntime = np.arange(1,2001,1)\nvalue = np.sin(2*np.pi*1/20*time)\n\nidx_min = np.where(time==200)[0][0]\nidx_max = np.where(time==400)[0][0]\n\nvalue2 = value[idx_min:idx_max+1]\n\nprint(value2)\n"}},{"node":{"name":"exc_03_03","code":"import numpy as np\n\n\ntime = np.arange(__,___,___)\nvalue = ____________\n\nidx_min = np.where(time==200)[0][0]\nidx_max = ______(time==____)[0][0]\n\nvalue2 = value[______]\n\nprint(value2)\n"}},{"node":{"name":"test_03_03","code":"import numpy as np\n\n\ndef test():\n    # Here we can either check objects created in the solution code, or the\n    # string value of the solution, available as __solution__. A helper for\n    # printing formatted messages is available as __msg__. See the testTemplate\n    # in the meta.json for details.\n\n    # If an assertion fails, the message will be displayed\n    idx_min = np.where(time==200)[0][0]\n    idx_max = np.where(time==400)[0][0]\n\n    np.testing.assert_allclose(value2, value[idx_min:idx_max+1], err_msg='Remember that slice notation is exclusive of the final index')\n\n    __msg__.good(\"Well done!\")\n"}},{"node":{"name":"solution_03_04","code":"import numpy as np\nfrom numpy.random import default_rng\n\nrng = default_rng(30) #seed to obtain same value for the distribution\n\n\ntime = np.arange(0,10001,100)\ntime_ens=np.reshape(np.repeat(time,1000),[np.shape(time)[0],1000])\nnoise = rng.normal(0, 200, size=np.shape(time_ens))\n\ntime_ens = time_ens+noise\n\ntime_mean = np.mean(time_ens,axis=1)\n\nprint(np.shape(time))\nprint(np.shape(time_ens))\nprint(np.shape(time_mean))\n"}},{"node":{"name":"exc_03_04","code":"import ______ as np\nfrom ______ import default_rng\n\nrng = default_rng(______) #seed to obtain same value for the distribution\n\n\ntime = np.arange(_,_,__)\ntime_ens=np.reshape(np.repeat(time,1000),[__,___])\nnoise = rng.normal(___,___, size=___)\n\ntime_ens = ______\n\ntime_mean = ______\n\nprint(np.shape(time))\nprint(np.shape(time_ens))\nprint(np.shape(time_mean))\n"}},{"node":{"name":"test_03_04","code":"import numpy as np\n\ndef test():\n    # Here we can either check objects created in the solution code, or the\n    # string value of the solution, available as __solution__. A helper for\n    # printing formatted messages is available as __msg__. See the testTemplate\n    # in the meta.json for details.\n\n    # If an assertion fails, the message will be displayed\n    np.testing.assert_allclose(time, np.arange(0,10001,100), err_msg='Time vector is incorrect. Remember that the last value is excluded')\n    assert np.shape(time_ens) == (101,1000), 'The shape of the ensemble array should be (length of time vector, 1000)'\n    assert np.shape(time_mean) == (101,), 'The shape of the mean should be the same as the shape of time'\n\n    __msg__.good(\"Well done!\")\n"}},{"node":{"name":"exc_04_01","code":"import pandas as pd\n\ndf = pd.read_csv('https://github.com/ProjectPythia/pythia-datasets/raw/main/data/enso_data.csv',index_col=0)\ndf.head()\n"}},{"node":{"name":"solution_04_02","code":"import pandas as pd\n\ndf = pd.read_csv('https://github.com/ProjectPythia/pythia-datasets/raw/main/data/enso_data.csv',index_col=0)\n\nnino = df[\"Nino12\"]\nnino_slice = nino[\"1982-01-01\":\"1982-12-01\"]\nnino_slice.plot()\n"}},{"node":{"name":"exc_04_02","code":"import ______ as pd\n\ndf = _________('https://github.com/ProjectPythia/pythia-datasets/raw/main/data/enso_data.csv',index_col=________)\n\nnino = df[______]\nnino_slice = ___________\nnino_slice__________\n"}}]}}}