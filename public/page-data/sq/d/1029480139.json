{"data":{"site":{"siteMetadata":{"testTemplate":"success <- function(text) {\n    cat(paste(\"\\033[32m\", text, \"\\033[0m\", sep = \"\"))\n}\n\n.solution <- \"${solutionEscaped}\"\n\n${solution}\n\n${test}\ntryCatch({\n    test()\n}, error = function(e) {\n    cat(paste(\"\\033[31m\", e[1], \"\\033[0m\", sep = \"\"))\n})","juniper":{"repo":"LinkedEarth/ec_workshops_py","branch":"binder","kernelType":"python3","lang":"python","debug":false}}},"allCode":{"edges":[{"node":{"name":"exc_01_01","code":"------------\n"}},{"node":{"name":"solution_01_01","code":"print(\"I love doing paleoclimate research with Python\")\n"}},{"node":{"name":"exc_01_02","code":"mylist =[___]\n\nfor item in ___:\n    print(___)\n"}},{"node":{"name":"solution_01_02","code":"mylist = ['Marine Sediment', 'Coral', 'Ice', 'Wood']\n\nfor item in mylist:\n    print(\"I study paleoclimate using \"+item)\n"}},{"node":{"name":"test_01_03","code":"def test():\n    # Here we can either check objects created in the solution code, or the\n    # string value of the solution, available as __solution__. A helper for\n    # printing formatted messages is available as __msg__. See the testTemplate\n    # in the meta.json for details.\n\n    # If an assertion fails, the message will be displayed\n    assert list(dataset1.keys())==['archiveType', 'geo', 'data'], \"Keys are incorrect\"\n    assert type(dataset1['geo']) == dict, 'geo should be a dictionary'\n    assert list(dataset1['geo'].keys())==['lat', 'lon'], 'The keys of the \"geo\" dictionary are incorrect'\n    assert type(dataset1['data']) == dict, 'data should be a dictionary'\n    assert list(dataset1['data'].keys())==['values', 'units'], 'The keys of the \"data\" dictionary are incorrect'\n    assert dataset1[\"archiveType\"] == \"marinesediment\", \"archiveType is incorrect\"\n    assert dataset1[\"geo\"]['lat'] == -5, \"lat is incorrect\"\n    assert dataset1[\"geo\"]['lon'] == 140, \"lon is incorrect\"\n    assert dataset1[\"data\"]['units'] == 'N/A', \"units is incorrect\"\n    assert type(dataset1[\"data\"]['values']) == list, \"The data values should be a list\"\n    assert dataset1[\"data\"]['values'] == [1,2,3], \"The data values are incorrect\"\n    assert latitude == -5, \"latitude is incorrect\"\n\n    __msg__.good(\"Well done!\")\n"}},{"node":{"name":"solution_01_03","code":"#Create the dictionary\n\ndataset1 = {\n            \"archiveType\":\"marinesediment\",\n            \"geo\":{\"lat\":-5,\"lon\":140},\n            \"data\":{\"values\":[1,2,3],\"units\":\"N/A\"}\n            }\n\n# return latitude into a variable\n\nlatitude = dataset1[\"geo\"][\"lat\"]\n"}},{"node":{"name":"exc_01_03","code":"# Create the dictionary\n\ndataset1 = {\n            \"archiveType\":_____,\n            _____________,\n            }\n\n# return latitude into a variable\n\nlatitude = _________\n"}}]}}}